<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>K8s on 北冥鱼 Blog</title>
    <link>https://zhuchance.github.io/tags/k8s/</link>
    <description>Recent content in K8s on 北冥鱼 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhuchance.github.io/tags/k8s/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>强制删除k8s上Terminating的Namespaces</title>
      <link>https://zhuchance.github.io/post/2020-08-07-forcedeletenamespace/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhuchance.github.io/post/2020-08-07-forcedeletenamespace/</guid>
      <description>转载来自 直接复制一个shell脚本吧 #!/bin/bash set -e useage(){ echo &amp;#34;useage:&amp;#34; echo &amp;#34; delns.sh NAMESPACE&amp;#34; } if [ $# -lt 1 ];then useage exit fi NAMESPACE=$1 JSONFILE=${NAMESPACE}.json kubectl get ns &amp;#34;${NAMESPACE}&amp;#34; -o json &amp;gt; &amp;#34;${JSONFILE}&amp;#34; vi &amp;#34;${JSONFILE}&amp;#34; curl -k -H &amp;#34;Content-Type: application/json&amp;#34; -X PUT --data-binary @&amp;#34;${JSONFLE}&amp;#34; \ http://127.0.0.1:8001/api/v1/namespaces/&amp;#34;${NAMESPACE}&amp;#34;/finalize 使用的时候打开ap</description>
    </item>
    
    <item>
      <title>在k8s上部署一个简单的mysql</title>
      <link>https://zhuchance.github.io/post/simplemysqldb/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhuchance.github.io/post/simplemysqldb/</guid>
      <description>warning 注意MySQL单实例只用于测试环境 ##namespace --- #apiVersion: v1 #kind: Namespace #metadata: # name: pre ##mysql-claim.yaml --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: mysql-ex-claim namespace: pre-mysql annotations: volume.beta.kubernetes.io/storage-class: &amp;#34;managed-nfs-storage&amp;#34; spec: accessModes: - ReadWriteOnce resources: requests: storage: 800Gi ##mysql-cm.yaml --- apiVersion: v1 kind: ConfigMap metadata: name: mysql-config namespace: pre-mysql data: custom.cnf: | [mysqld] server-id=1 log-bin expire_logs_days=7 sync_binlog=0 binlog_cache_size=1M</description>
    </item>
    
    <item>
      <title>rook-ceph-部署篇</title>
      <link>https://zhuchance.github.io/post/rook-ceph/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhuchance.github.io/post/rook-ceph/</guid>
      <description>warning 注意rook-ceph现在还不太建议上生产 What is Rook? Storage Operators for Kubernetes 引用官网 Rook turns distributed storage systems into self-managing, self-scaling, self-healing storage services. It automates the tasks of a storage administrator: deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management. Rook uses the power of</description>
    </item>
    
    <item>
      <title>helm3 使用国内原安装Weave Scope</title>
      <link>https://zhuchance.github.io/post/helm3%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%8E%9F%E5%AE%89%E8%A3%85weavescope/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhuchance.github.io/post/helm3%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%8E%9F%E5%AE%89%E8%A3%85weavescope/</guid>
      <description>Weave Scope是Docker 和Kubernetes 可视化监控工具。 Scope 提供了至上而下的集群基础设施和应用的完整视图，用户可以轻松对分布式的容器化</description>
    </item>
    
    <item>
      <title>PrometheusOperator部署</title>
      <link>https://zhuchance.github.io/post/prometheusoperator%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhuchance.github.io/post/prometheusoperator%E9%83%A8%E7%BD%B2/</guid>
      <description>Prometheus-Operator官方提供的架构图： 可惜我自己用符号画出来变形了，这篇文章比较水，完全是凑流水账的，因为有些东西我现在还</description>
    </item>
    
  </channel>
</rss>